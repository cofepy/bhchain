// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BHMsg struct {
	Signature            []byte   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Type                 uint32   `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BHMsg) Reset()         { *m = BHMsg{} }
func (m *BHMsg) String() string { return proto.CompactTextString(m) }
func (*BHMsg) ProtoMessage()    {}
func (*BHMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *BHMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BHMsg.Unmarshal(m, b)
}
func (m *BHMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BHMsg.Marshal(b, m, deterministic)
}
func (m *BHMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BHMsg.Merge(m, src)
}
func (m *BHMsg) XXX_Size() int {
	return xxx_messageInfo_BHMsg.Size(m)
}
func (m *BHMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BHMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BHMsg proto.InternalMessageInfo

func (m *BHMsg) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BHMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *BHMsg) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func init() {
	proto.RegisterType((*BHMsg)(nil), "pb.BHMsg")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x0a, 0xe6,
	0x62, 0x75, 0xf2, 0xf0, 0x2d, 0x4e, 0x17, 0x92, 0xe1, 0xe2, 0x2c, 0xce, 0x4c, 0xcf, 0x4b, 0x2c,
	0x29, 0x2d, 0x4a, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x42, 0x08, 0x08, 0x49, 0x70, 0xb1,
	0x17, 0x24, 0x56, 0xe6, 0xe4, 0x27, 0xa6, 0x48, 0x30, 0x81, 0xe5, 0x60, 0x5c, 0x21, 0x21, 0x2e,
	0x96, 0x92, 0xca, 0x82, 0x54, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xde, 0x20, 0x30, 0xdb, 0xc8, 0x94,
	0x8b, 0x2b, 0xc0, 0xa8, 0x20, 0x18, 0x62, 0x99, 0x90, 0x3a, 0x17, 0xb7, 0x73, 0x7e, 0x6e, 0x6e,
	0x69, 0x5e, 0x66, 0x72, 0x62, 0x49, 0xaa, 0x10, 0xa7, 0x5e, 0x41, 0x92, 0x1e, 0xd8, 0x4e, 0x29,
	0x04, 0x53, 0x83, 0xd1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x2c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x92, 0x2a, 0x8c, 0x73, 0xa7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// P2PServiceClient is the client API for P2PService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (P2PService_CommunicateClient, error)
}

type p2PServiceClient struct {
	cc *grpc.ClientConn
}

func NewP2PServiceClient(cc *grpc.ClientConn) P2PServiceClient {
	return &p2PServiceClient{cc}
}

func (c *p2PServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (P2PService_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_P2PService_serviceDesc.Streams[0], "/pb.P2pService/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PServiceCommunicateClient{stream}
	return x, nil
}

type P2PService_CommunicateClient interface {
	Send(*BHMsg) error
	Recv() (*BHMsg, error)
	grpc.ClientStream
}

type p2PServiceCommunicateClient struct {
	grpc.ClientStream
}

func (x *p2PServiceCommunicateClient) Send(m *BHMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PServiceCommunicateClient) Recv() (*BHMsg, error) {
	m := new(BHMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PServiceServer is the server API for P2PService service.
type P2PServiceServer interface {
	Communicate(P2PService_CommunicateServer) error
}

// UnimplementedP2PServiceServer can be embedded to have forward compatible implementations.
type UnimplementedP2PServiceServer struct {
}

func (*UnimplementedP2PServiceServer) Communicate(srv P2PService_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}

func RegisterP2PServiceServer(s *grpc.Server, srv P2PServiceServer) {
	s.RegisterService(&_P2PService_serviceDesc, srv)
}

func _P2PService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PServiceServer).Communicate(&p2PServiceCommunicateServer{stream})
}

type P2PService_CommunicateServer interface {
	Send(*BHMsg) error
	Recv() (*BHMsg, error)
	grpc.ServerStream
}

type p2PServiceCommunicateServer struct {
	grpc.ServerStream
}

func (x *p2PServiceCommunicateServer) Send(m *BHMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PServiceCommunicateServer) Recv() (*BHMsg, error) {
	m := new(BHMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _P2PService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.P2pService",
	HandlerType: (*P2PServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _P2PService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
